install.packages("ggpubr")
library("ggpubr")
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
my_data <- mtcars
head(my_data, 6)
#                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
# Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
# Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
# Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
# Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
# Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
# Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
#可视化
# 先确定数据类型，再决定方法
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggqqplot(my_data$mpg, ylab = "MPG")
shapiro.test(my_data$mpg)
res <- cor.test(my_data$wt, my_data$mpg,
method = "pearson")
res
？cor.test
?cor.test
library(Hmisc)
res2<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res2$r, res2$P)
# 将显著性数值转化为图形:
symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
symnum(res, abbr.colnames = FALSE)
# 写一个函数提取r & p
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
# 案例 :
library(Hmisc)
res2<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res2$r, res2$P)
# 将显著性数值转化为图形:
symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
symnum(res, abbr.colnames = FALSE)
symnum(res, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
symnum(res2, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
install.packages("corrplot")
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res
library(Hmisc)
res2<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res2$r, res2$P)
res3 <-flattenCorrMatrix(res2$r, res2$P)
# 将显著性数值转化为图形:
symnum(res3, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
# 将显著性数值转化为图形:
symnum(res3$p, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
# 将显著性数值转化为图形:
symnum(res3$p, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)symnum(res, abbr.colnames = FALSE)
symnum(res3, abbr.colnames = FALSE)
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
my_data <- mtcars[, c(1,3,4,5,6,7)]
# scatter plot, chart
# Get some colors
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res, col = col, symm = TRUE)
res
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res3, col = col, symm = TRUE)
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = as.matrix(res3), col = col, symm = TRUE)
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = as.matrix(res3), col = col, symm = TRUE)
View(res3)
symnum(my_data, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
rank(res3)
rank(res3$p)
res3
if(!require(devtools))
install.packages("devtools")
if(!require(ggcor))
devtools::install_github("houyunhuang/ggcor")
install.packages("devtools")
devtools::install_github("zlabx/ggcor")
BiocManager::install("ggcor")
devtools::install_github("houyunhuang/ggcor")
devtools::install_github("houyunhuang/ggcor")
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.2
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec.select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p.value, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
quickcor(varechem, type = "upper") +
geom_square() +
anno_link(aes(colour = pd, size = rd), data = mantel) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = c("#D95F02", "#1B9E77", "#A2A2A288")) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
ggcor(mtcars, type = "full", cor.test = TRUE, cluster.type = "all") +
geom_raster() +
geom_mark(r = NA, sig.thres = 0.05, size = 5, colour = "grey90")
devtools::install_github("houyunhuang/ggcor")
install.packages("processx")
devtools::install_github("houyunhuang/ggcor")
devtools::install_github("houyunhuang/ggcor")
devtools::install_github("houyunhuang/ggcor")
devtools::install_github("houyunhuang/ggcor")
setwd("Z:/360MoveData/Users/Administrator/Desktop/RNAseq-Vis-Workshop")
install.packages("ggcor-1-master/",repo=NULL,type = "source")
install.packages(c('ggnewscale', 'patchwork'))
install.packages("ggcor-1-master/",repo=NULL,type = "source")
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec.select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p.value, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
quickcor(varechem, type = "upper") +
geom_square() +
anno_link(aes(colour = pd, size = rd), data = mantel) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = c("#D95F02", "#1B9E77", "#A2A2A288")) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
rand_correlate(100, 8) %>% ## require ambient packages
quickcor(circular = TRUE, cluster = TRUE, open = 45) +
geom_colour(colour = "white", size = 0.125) +
anno_row_tree() +
anno_col_tree() +
set_p_xaxis() +
set_p_yaxis()
library(dplyr)
#> Warning: package 'dplyr' was built under R version 3.6.2
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec.select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p.value, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
quickcor(varechem, type = "upper") +
geom_square() +
anno_link(aes(colour = pd, size = rd), data = mantel) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = c("#D95F02", "#1B9E77", "#A2A2A288")) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
rand_correlate(100, 8) %>% ## require ambient packages
quickcor(circular = TRUE, cluster = TRUE, open = 45) +
geom_colour(colour = "white", size = 0.125) +
anno_row_tree() +
anno_col_tree() +
set_p_xaxis() +
set_p_yaxis()
library(dplyr)
library(ggcor)
#> Warning: package 'dplyr' was built under R version 3.6.2
data("varechem", package = "vegan")
data("varespec", package = "vegan")
mantel <- mantel_test(varespec, varechem,
spec.select = list(Spec01 = 1:7,
Spec02 = 8:18,
Spec03 = 19:37,
Spec04 = 38:44)) %>%
mutate(rd = cut(r, breaks = c(-Inf, 0.2, 0.4, Inf),
labels = c("< 0.2", "0.2 - 0.4", ">= 0.4")),
pd = cut(p.value, breaks = c(-Inf, 0.01, 0.05, Inf),
labels = c("< 0.01", "0.01 - 0.05", ">= 0.05")))
quickcor(varechem, type = "upper") +
geom_square() +
anno_link(aes(colour = pd, size = rd), data = mantel) +
scale_size_manual(values = c(0.5, 1, 2)) +
scale_colour_manual(values = c("#D95F02", "#1B9E77", "#A2A2A288")) +
guides(size = guide_legend(title = "Mantel's r",
override.aes = list(colour = "grey35"),
order = 2),
colour = guide_legend(title = "Mantel's p",
override.aes = list(size = 3),
order = 1),
fill = guide_colorbar(title = "Pearson's r", order = 3))
rand_correlate(100, 8) %>% ## require ambient packages
quickcor(circular = TRUE, cluster = TRUE, open = 45) +
geom_colour(colour = "white", size = 0.125) +
anno_row_tree() +
anno_col_tree() +
set_p_xaxis() +
set_p_yaxis()
ggcor(mtcars, type = "full", cor.test = TRUE, cluster.type = "all") +
geom_raster() +
geom_mark(r = NA, sig.thres = 0.05, size = 5, colour = "grey90")
library(vegan) # 使用vegan包所带的数据集
data(varechem)
data(varespec)
df03 <- fortify_cor(x = varechem, y = varespec[ , 1:30], cluster.type = "col")
ggcor(df03) + geom_colour()
corr <- fortify_cor(varechem, varechem[ , 1:7], type = "full", show.diag = TRUE,
cor.test = TRUE, cluster.type = "all")
mantel <- fortify_mantel(varespec, varechem,
spec.select = list(spec01 = 22:25,
spec02 = 1:4,
spec03 = 38:43,
spec04 = 15:20),
mantel.fun = "mantel.randtest", nrepet = 2000)
extra.params <- extra_params(group.label = text_params(size = 6),
link.params = link_params(group.point.hjust = 2))
ggcor(corr, axis.y.position = "left", legend.position = "left", xlim = c(0.5, 14.5)) +
add_link(mantel, extra.params = extra.params) +
geom_circle2()
mantel
rand_correlate(100, 8) %>% ## require ambient packages
quickcor(circular = TRUE, cluster = TRUE, open = 45) +
geom_colour(colour = "white", size = 0.125) +
anno_row_tree() +
anno_col_tree() +
set_p_xaxis() +
set_p_yaxis()
library(ambient)
BiocManager::install(ambient)
BiocManager::install("ambient")
rand_correlate(100, 8) %>% ## require ambient packages
quickcor(circular = TRUE, cluster = TRUE, open = 45) +
geom_colour(colour = "white", size = 0.125) +
anno_row_tree() +
anno_col_tree() +
set_p_xaxis() +
set_p_yaxis()
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
theme_bw()+theme(panel.grid = element_blank())
wine
HE361.BAC.short <- read.csv("Z:/360MoveData/Users/Administrator/Desktop/RNAseq-Vis-Workshop/Roundtable-Multivar-Stats/HE361-BAC-short.csv", row.names=1)
View(HE361.BAC.short)
otu <- HE361.BAC.short
library(vegan)
library(ggplot2)
library(ggrepel)
library(ggsci)
Mycolor = c("#E64B35B2","#4DBBD5B2","#00A087B2","#3C5488B2","#F39B7FB2","#8491B4B2","#91D1C2B2","#DC0000B2","#7E6148B2")
otu_table <- otu_table[which(rowSums(otu_table) > 10),]
otu_hel <- decostand(otu_table, method = 'hellinger')
pca_sp2 <- rda(otu_hel, scale = FALSE)
pca_exp2 <- pca_sp2$CA$eig / sum(pca_sp2$CA$eig)
pc1_sp2 <- paste0('PC1(', round(pca_exp2[1]*100, 2), '%)')
pc2_sp2 <- paste0('PC2(',round(pca_exp2[2]*100, 2), '%)')
ggplot()+geom_point(data= as.data.frame(pca$rotation),aes(x=PC1,y=PC2,color=sample_metadata$Grouping_1))+
theme_bw()+geom_hline(yintercept=0,linetype=3,size=1,color='grey')+
geom_vline(xintercept=0,linetype=3,size=1,color='grey')+
labs(x=pc1_sp2,y=pc2_sp2)+scale_color_npg()
#dd=rda(log10(otu_table))###此处对物种数据取对数作转化，可根据自己数据选择合适的转化方法
oo=summary(dd) %>% as.data.frame()
site=as.data.frame(oo$sites)###提取样方坐标
spp=as.data.frame(oo$species)###提取物种坐标
grp=as.data.frame(c(rep("a",4),rep("b",4),rep("c",4),rep("d",4)))###根据样方类型分组
colnames(grp)="group"
###以下开始作图
ggplot()+
geom_point(data=site,aes(x=PC1,y=PC2,shape=grp$group,fill=grp$group),size=4)+
scale_shape_manual(values = c(21:24))+
geom_segment(data=spp,aes(x=0,y=0,xend=PC1,yend=PC2),
arrow = arrow(angle = 22.5,length = unit(0.35,"cm"),
type="closed"),linetype=1,size=1,color="red")+
geom_text_repel(data=spp,aes(x=PC1,y=PC2),label=row.names(spp))+
geom_hline(yintercept=0,linetype=3,size=1)+
geom_vline(xintercept=0,linetype=3,size=1)+
labs(x=paste("PC1(", format(100 *oo$cont[[1]][2,1], digits=4), "%)", sep=""),
y=paste("PC2(", format(100 *oo$cont[[1]][2,2], digits=4), "%)", sep=""))+
guides(shape=guide_legend(title = NULL),fill=guide_legend(title = NULL))+
theme_bw()+theme(panel.grid = element_blank())
otu_table <- HE361.BAC.short
library(vegan)
library(ggplot2)
library(ggrepel)
library(ggsci)
Mycolor = c("#E64B35B2","#4DBBD5B2","#00A087B2","#3C5488B2","#F39B7FB2","#8491B4B2","#91D1C2B2","#DC0000B2","#7E6148B2")
otu_table <- otu_table[which(rowSums(otu_table) > 10),]
otu_hel <- decostand(otu_table, method = 'hellinger')
pca_sp2 <- rda(otu_hel, scale = FALSE)
pca_exp2 <- pca_sp2$CA$eig / sum(pca_sp2$CA$eig)
pc1_sp2 <- paste0('PC1(', round(pca_exp2[1]*100, 2), '%)')
pc2_sp2 <- paste0('PC2(',round(pca_exp2[2]*100, 2), '%)')
ggplot()+geom_point(data= as.data.frame(pca$rotation),aes(x=PC1,y=PC2,color=sample_metadata$Grouping_1))+
theme_bw()+geom_hline(yintercept=0,linetype=3,size=1,color='grey')+
geom_vline(xintercept=0,linetype=3,size=1,color='grey')+
labs(x=pc1_sp2,y=pc2_sp2)+scale_color_npg()
#dd=rda(log10(otu_table))###此处对物种数据取对数作转化，可根据自己数据选择合适的转化方法
oo=summary(dd) %>% as.data.frame()
site=as.data.frame(oo$sites)###提取样方坐标
spp=as.data.frame(oo$species)###提取物种坐标
grp=as.data.frame(c(rep("a",4),rep("b",4),rep("c",4),rep("d",4)))###根据样方类型分组
colnames(grp)="group"
###以下开始作图
ggplot()+
geom_point(data=site,aes(x=PC1,y=PC2,shape=grp$group,fill=grp$group),size=4)+
scale_shape_manual(values = c(21:24))+
geom_segment(data=spp,aes(x=0,y=0,xend=PC1,yend=PC2),
arrow = arrow(angle = 22.5,length = unit(0.35,"cm"),
type="closed"),linetype=1,size=1,color="red")+
geom_text_repel(data=spp,aes(x=PC1,y=PC2),label=row.names(spp))+
geom_hline(yintercept=0,linetype=3,size=1)+
geom_vline(xintercept=0,linetype=3,size=1)+
labs(x=paste("PC1(", format(100 *oo$cont[[1]][2,1], digits=4), "%)", sep=""),
y=paste("PC2(", format(100 *oo$cont[[1]][2,2], digits=4), "%)", sep=""))+
guides(shape=guide_legend(title = NULL),fill=guide_legend(title = NULL))+
theme_bw()+theme(panel.grid = element_blank())
otu_table
otu_table <- HE361.BAC.short
View(otu_table)
otu_table <- otu_table[which(rowSums(otu_table) > 10),]
otu_hel <- decostand(otu_table, method = 'hellinger')
pca_sp2 <- rda(otu_hel, scale = FALSE)
pca_exp2 <- pca_sp2$CA$eig / sum(pca_sp2$CA$eig)
pc1_sp2 <- paste0('PC1(', round(pca_exp2[1]*100, 2), '%)')
pc2_sp2 <- paste0('PC2(',round(pca_exp2[2]*100, 2), '%)')
otu_table <- HE361.BAC.short
otu_hel <- decostand(otu_table, method = 'hellinger')
pca_sp2 <- rda(otu_hel, scale = FALSE)
pca_exp2 <- pca_sp2$CA$eig / sum(pca_sp2$CA$eig)
pc1_sp2 <- paste0('PC1(', round(pca_exp2[1]*100, 2), '%)')
pc2_sp2 <- paste0('PC2(',round(pca_exp2[2]*100, 2), '%)')
ggplot()+geom_point(data= as.data.frame(pca$rotation),aes(x=PC1,y=PC2,color=sample_metadata$Grouping_1))+
theme_bw()+geom_hline(yintercept=0,linetype=3,size=1,color='grey')+
geom_vline(xintercept=0,linetype=3,size=1,color='grey')+
labs(x=pc1_sp2,y=pc2_sp2)+scale_color_npg()
pca_sp2
dd=rda(log10(otu_table))###此处对物种数据取对数作转化，可根据自己数据选择合适的转化方法
oo=summary(dd) %>% as.data.frame()
site=as.data.frame(oo$sites)###提取样方坐标
spp=as.data.frame(oo$species)###提取物种坐标
grp=as.data.frame(c(rep("a",4),rep("b",4),rep("c",4),rep("d",4)))###根据样方类型分组
colnames(grp)="group"
###以下开始作图
rda(log10(otu_table))
library(dplyr)
library(ReactomePA)
library(clusterProfiler)
library(ggplot2)
library(forcats)
library(dplyr)
library(ReactomePA)
library(clusterProfiler)
library(ggplot2)
library(forcats)
install.packages("ReactomePA")
BiocManager::install("ReactomePA")
library(dplyr)
library(ReactomePA)
library(clusterProfiler)
library(ggplot2)
library(forcats)
all_reactome <- data.frame()
all_kegg <- data.frame()
all_go <- data.frame()
all_mkegg <- data.frame()
setwd("Roundtable-Multivar-Stats/")
input_g <- read.delim("test3.txt", header=T)
input_e <- bitr(input_g$Ensembl, fromType='ENSEMBL', toType='ENTREZID', OrgDb="org.Mm.eg.db")
input_e
BiocManager::install("org.Mm.eg.db")
input_e <- bitr(input_g$Ensembl, fromType='ENSEMBL', toType='ENTREZID', OrgDb="org.Mm.eg.db")
input_e
input_g
names(input_g)[1]
names(input_g)[1] <- 'Ensembl'
input_e <- bitr(input_g$Ensembl, fromType='ENSEMBL', toType='ENTREZID', OrgDb="org.Mm.eg.db")
input_g <- read.delim("test3.txt", header=T)
names(input_g)[1] <- 'Ensembl'
input_e <- bitr(input_g$Ensembl, fromType='ENSEMBL', toType='ENTREZID', OrgDb="org.Mm.eg.db")
input_e
genes_reactome <- enrichPathway(gene=input_e$ENTREZID,organism ="mouse",pvalueCutoff=0.05,readable=T)
#Get reactome results
genes_reactome2 <- as.data.frame(genes_reactome)
genes_reactome2
all_reactome <- rbind(all_reactome, genes_reactome2)
genes_go <- enrichGO(gene=input_e$ENTREZID, OrgDb="org.Mm.eg.db",ont= "BP", pvalueCutoff=0.05)
genes_go
genes_go2 <- as.data.frame(genes_go)
all_go <- rbind(all_go, genes_go2)
all_go
#KEGG pathway enrichment
genes_kegg <- enrichKEGG(gene=input_e$ENTREZID ,organism = "mmu",pvalueCutoff = 0.05)
#Get KEGG results
genes_kegg2 <- as.data.frame(genes_kegg)
genes_kegg2
#Append reactome results to previous results
all_kegg <- rbind(all_kegg, genes_kegg2)
all_kegg
#### Plotting: for example reactome top 10 ####
# Get top 10 list by p adjust
all_reactome_top10 <- all_reactome %>% top_n(-10, p.adjust)
# Convert gene ratio to decimal
all_reactome_top10$GeneRatio <- sapply(all_reactome_top10$GeneRatio, function(x) eval(parse(text=x)))
all_reactome_top10$GeneRatio
all_reactome_top10
# plotting
ggplot(all_reactome_top10, aes(x = GeneRatio, y = fct_reorder(Description, GeneRatio))) +
geom_point(aes(color = p.adjust,size = Count)) +
theme_bw(base_size = 20) +
scale_colour_gradient(high="mediumblue", low="red2") +
ylab(NULL)
# plotting
ggplot(all_reactome_top10, aes(x = GeneRatio, y = fct_reorder(Description, GeneRatio))) +
geom_point(aes(color = p.adjust,size = Count)) +
theme_bw(base_size = 20) +
scale_colour_gradient(high="mediumblue", low="red2") +
ylab(NULL)
#### Plotting: for example GO top 15 ####
# Change labels and get top 10 by p adjust - change the x in top_n(-x, p.adjust) for top x terms
# it is -x because we want the least p.adjust so technically it is ranking from the bottom.
all_go
all_go_top15 <- top_n(all_go, -15, p.adjust)
# all_go_top15 <- top_n(all_go, 20, Count) # Top 20 by gene count
# all_go_top15 <- all_go %>% top_n(-20, p.adjust) # This works as well. Can compare
# Convert gene ratio to decimal
all_go_top15$GeneRatio <- sapply(all_go_top15$GeneRatio, function(x) eval(parse(text=x)))
all_go_top15
ggplot(all_go_top15, aes(x = GeneRatio, y = fct_reorder(Description, GeneRatio))) +
geom_point(aes(color = p.adjust,size = Count)) +
theme_bw(base_size = 14) +
scale_colour_gradient(high="mediumblue", low="red2",space = "Lab")+
ylab(NULL)
#### Plotting: for example KEGG top 10 ####
# Change labels and get top 15 by p adjust
all_kegg_top15 <- all_kegg %>% top_n(-15, p.adjust)
# Convert gene ratio to decimal
all_kegg_top15$GeneRatio <- sapply(all_top15$GeneRatio, function(x) eval(parse(text=x)))
all_kegg_top15
# plotting
ggplot(all_kegg_top15, aes(x = GeneRatio, y = fct_reorder(Description, GeneRatio))) +
geom_point(aes(color = p.adjust,size = Count)) +
theme_bw(base_size = 14) +
scale_colour_gradient(high="mediumblue", low="red2",space = "Lab")+
ylab(NULL)
all_kegg_top15
all_kegg_top15$GeneRatio <- sapply(all_top15$GeneRatio, function(x) eval(parse(text=x)))
all_kegg_top15$GeneRatio <- sapply(all_kegg_top15$GeneRatio, function(x) eval(parse(text=x)))
all_kegg_top15
ggplot(all_kegg_top15, aes(x = GeneRatio, y = fct_reorder(Description, GeneRatio))) +
geom_point(aes(color = p.adjust,size = Count)) +
theme_bw(base_size = 14) +
scale_colour_gradient(high="mediumblue", low="red2",space = "Lab")+
ylab(NULL)
write.table(all_reactome, "FunctionalEnrichment_Reactome_0.05.txt",quote = F, sep = "\t", row.names = F)
write.table(all_kegg, "FunctionalEnrichment_KEGG_0.05.txt",quote = F, sep = "\t", row.names = F)
write.table(all_go, "FunctionalEnrichment_GO_0.05.txt",quote = F, sep = "\t", row.names = F)
